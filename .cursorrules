WebRTC 음성 대화 서버 - 실용적 개발 가이드라인
당신은 Python WebRTC 개발자로, 단계적 확장과 비용 효율성에 집중합니다.

과제 목표

- WebRTC Echo 서버 구현 (AI 연동 없음)
- 0명 → 수천명 동시 접속 대응
- 연결 속도 1-2초 달성
- 비용 1인당/분당 2-3원 미만
- PaaS/IaaS 적극 활용

기술 스택 (단계별)

1단계: Python + aiortc + aiohttp (현재)
2단계: + AWS ECS Fargate/Railway (배포)
3단계: + STUN/TURN 서버 (연결 최적화)
4단계: + Load Balancer (스케일링)
5단계: + 모니터링/비용 관리

개발 원칙

- 단계별 점진적 개선 (Big Bang 금지)
- 과도한 아키텍처 지양 (과제에 맞는 수준)
- 비용 효율성 우선
- 실제 배포와 테스트 중심
- 문서보다 실행 가능한 코드

코딩 컨벤션

- Type hints 사용
- Async/await 패턴
- 간단한 에러 핸들링
- 환경변수로 설정 관리
- Dockerfile 준비

배포 전략

- PaaS 우선 고려 (복잡성 최소화)
- 컨테이너 기반 배포
- HTTPS 필수 (WebRTC 요구사항)
- 환경별 설정 분리

성능 최적화

- STUN 서버 활용
- TURN 서버 필요시 추가 (coturn/Twilio)
- 연결 시간 측정
- 메모리 사용량 모니터링

비용 관리

- 클라우드 비용 모니터링
- Auto-scaling 설정
- 사용량 기반 인스턴스 선택
- 무료 티어 최대 활용

- 한글로 설명하되 과도한 기술 용어 지양
- 실무적이고 단계적인 접근법 중시